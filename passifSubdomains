#!/bin/bash
set -euo pipefail

# ANSI color code definitions
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No color

# Check that essential commands are installed
function check_command() {
    if ! command -v "$1" &>/dev/null; then
        echo -e "${RED}Error: '$1' is not installed. Please install it before continuing.${NC}"
        exit 1
    fi
}

check_command theHarvester
check_command jq

# List of directly integrated sources
SOURCES=(
    "baidu"
    "bufferoverum"
    "crtsh"
    "hackertarget"
    "otx"
    "projecdiscovery"
    "rapiddns"
    "sublist3r"
    "threatcrowd"
    "trello"
    "urlscan"
    "vhost"
    "virustotal"
    "zoomeye"
    "shodan"
)

# Function to validate domain format
function validate_domain() {
    local domain="$1"
    if [[ "$domain" =~ ^([a-zA-Z0-9]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?\.)+[a-zA-Z]{2,}$ ]]; then
        return 0
    else
        return 1
    fi
}

# Function to execute theHarvester on a given source
function run_theHarvester() {
    local source="$1"
    echo -e "${BLUE}[*] Launching theHarvester with source: ${source}${NC}"
    # If theHarvester fails, don't stop the script (|| true) to continue with other sources
    theHarvester -d "${TARGET}" -b "${source}" -f "${source}_${TARGET}" >/dev/null 2>&1 || true
}

# Function to process a single domain
function process_domain() {
    local TARGET="$1"
    local CURRENT_DIR="$2"
    local BATCH_MODE="${3:-false}"
    
    echo -e "${BLUE}[*] Processing domain: ${TARGET}${NC}"
    
    # Validate the provided domain
    if ! validate_domain "$TARGET"; then
        echo -e "${RED}Error: '$TARGET' is not a valid domain. Skipped.${NC}"
        return 1
    fi
    
    # Create temporary directory
    TMP_DIR="/tmp/recon/subdomains_${TARGET}_$(date +%s)"
    mkdir -p "${TMP_DIR}" || { echo -e "${RED}Error creating temporary directory${NC}"; return 1; }

    pushd "${TMP_DIR}" >/dev/null

    # Execute theHarvester for each source
    for source in "${SOURCES[@]}"; do
        run_theHarvester "${source}"
    done

    # Extract subdomains
    if ls *.json &>/dev/null; then
        jq -r '.hosts[]' *.json 2>/dev/null | cut -d':' -f1 | sort -u > "./${TARGET}_theHarvester.txt"
    else
        echo -e "${YELLOW}[!] No JSON file generated by theHarvester for ${TARGET}.${NC}"
    fi

    # Combine generated .txt files
    TEMP_OUTPUT="${TMP_DIR}/${TARGET}_results.txt"
    cat ${TARGET}_*.txt 2>/dev/null | sort -u > "${TEMP_OUTPUT}"
    echo "" >> "${TEMP_OUTPUT}"
    echo "${TARGET}" >> "${TEMP_OUTPUT}"

    popd >/dev/null
    
    # In batch mode, just return the temporary file path
    if [ "$BATCH_MODE" = "true" ]; then
        echo "${TEMP_OUTPUT}"
        return 0
    else
        # In simple mode, copy directly to subdomains_passive.txt
        OUTPUT_FILE="${CURRENT_DIR}/subdomains_passive.txt"
        cp "${TEMP_OUTPUT}" "${OUTPUT_FILE}"
        rm -rf "${TMP_DIR}"
        echo -e "${GREEN}[+] Passive collection completed for ${TARGET}.${NC}"
        echo -e "${GREEN} - Subdomains: ${OUTPUT_FILE}${NC}"
        return 0
    fi
}

# Main function
function main() {
    # Check if an argument was provided
    if [ $# -eq 0 ]; then
        echo -e "${RED}Error: Please provide a target domain or a domains file.${NC}"
        echo -e "Usage:"
        echo -e "  $0 example.com                    # Scan a single domain"
        echo -e "  $0 -f domains.txt                 # Scan multiple domains from a file"
        exit 1
    fi
    
    CURRENT_DIR="$(pwd)"
    mkdir -p /tmp/recon/
    
    # Processing according to mode (file or single domain)
    if [ "$1" = "-f" ] || [ "$1" = "--file" ]; then
        # File mode: process multiple domains
        if [ $# -ne 2 ]; then
            echo -e "${RED}Error: Please provide a domains file.${NC}"
            echo -e "Usage: $0 -f domains.txt"
            exit 1
        fi
        
        DOMAINS_FILE="$2"
        
        if [ ! -f "${DOMAINS_FILE}" ]; then
            echo -e "${RED}Error: The file '${DOMAINS_FILE}' does not exist.${NC}"
            exit 1
        fi
        
        if [ ! -s "${DOMAINS_FILE}" ]; then
            echo -e "${RED}Error: The file '${DOMAINS_FILE}' is empty.${NC}"
            exit 1
        fi
        
        # Create consolidated results file
        FINAL_OUTPUT="${CURRENT_DIR}/subdomains_passive.txt"
        > "${FINAL_OUTPUT}"
        
        echo -e "${BLUE}[*] Batch mode: processing multiple domains from ${DOMAINS_FILE}${NC}"
        
        TOTAL_DOMAINS=$(grep -cv '^[[:space:]]*$' "${DOMAINS_FILE}" 2>/dev/null || echo 0)
        CURRENT=0
        PROCESSED=0
        TEMP_FILES=()
        
        while IFS= read -r domain || [ -n "$domain" ]; do
            # Ignore empty lines and comments
            domain=$(echo "$domain" | sed 's/#.*//' | xargs)
            [ -z "$domain" ] && continue
            
            CURRENT=$((CURRENT + 1))
            echo -e "\n${YELLOW}[*] Progress: ${CURRENT}/${TOTAL_DOMAINS}${NC}"
            
            # Capture process_domain output (the temporary file path)
            TEMP_FILE=$(process_domain "$domain" "$CURRENT_DIR" "true" 2>&1 | tail -n 1)
            
            # Verify that the temporary file exists and is not empty
            if [ -f "$TEMP_FILE" ] && [ -s "$TEMP_FILE" ]; then
                PROCESSED=$((PROCESSED + 1))
                TEMP_FILES+=("$TEMP_FILE")
                echo -e "${GREEN}[âœ“] Domain processed: ${domain}${NC}"
            else
                echo -e "${YELLOW}[!] No results for: ${domain}${NC}"
            fi
        done < "${DOMAINS_FILE}"
        
        # Consolidate all results into subdomains_passive.txt
        if [ ${#TEMP_FILES[@]} -gt 0 ]; then
            echo -e "\n${BLUE}[*] Consolidating results...${NC}"
            cat "${TEMP_FILES[@]}" 2>/dev/null | sort -u > "${FINAL_OUTPUT}"
            
            # Verify that the final file is not empty
            if [ -s "${FINAL_OUTPUT}" ]; then
                TOTAL_SUBDOMAINS=$(wc -l < "${FINAL_OUTPUT}")
                echo -e "${GREEN}[+] ${TOTAL_SUBDOMAINS} unique subdomains found${NC}"
            else
                echo -e "${YELLOW}[!] No subdomains found${NC}"
            fi
        else
            echo -e "${YELLOW}[!] No results to consolidate${NC}"
        fi
        
        # Clean up temporary directories
        rm -rf /tmp/recon/subdomains_*
        
        echo -e "\n${GREEN}[+] Batch processing completed!${NC}"
        echo -e "${GREEN}[+] ${PROCESSED}/${TOTAL_DOMAINS} domains successfully processed${NC}"
        echo -e "${GREEN}[+] Consolidated results in: ${FINAL_OUTPUT}${NC}"
        
    else
        # Single domain mode
        if [ $# -ne 1 ]; then
            echo -e "${RED}Error: Incorrect usage.${NC}"
            echo -e "Usage: $0 example.com  OR  $0 -f domains.txt"
            exit 1
        fi
        
        TARGET="$1"
        process_domain "$TARGET" "$CURRENT_DIR" "false"
    fi
}

# Call the main function with all arguments passed to the script
main "$@"
